variable liste_actions = [('action_1', 20, 5), ('action_2', 30, 10), ('action_3', 50, 15), ('action_4', 70, 20),
                 ('action_5', 60, 17), ('action_6', 80, 25), ('action_7', 22, 7), ('action_8', 26, 11),
                 ('action_9', 48, 13), ('action_10', 34, 27), ('action_11', 42, 17), ('action_12', 110, 9),
                 ('action_13', 38, 23), ('action_14', 14, 1), ('action_15', 18, 3), ('action_16', 8, 8),
                 ('action_17', 4, 12), ('action_18', 10, 14), ('action_19', 24, 21), ('action_20', 114, 18)]
variable actions_selectionnees = []
variable benefice_total = 0
variable cout_total = 0
variable plafond = 500


fonction force_brute(parametre_1 : plafond, parametre_2, liste_actions, parametre_3 : actions_selectionnees) {
    si liste_actions != [] {
        variable val1, variable lstVal1 = force_brute(plafond, liste_actions[excepte_1ere], actions_selectionnees)
        variable val = liste_actions[1ere]
        si val[2eme_element] <= plafond {
            variable val2, variable lstVal2 = force_brute(plafond, liste_actions[excepte_1ere], actions_selectionnees + [val])
            si val1 < val2 {
                retourner val2, lstVal2
            }
        }retourner val1, lstVal1
    }sinon {
        retourner somme([i[3eme_element] pour i dans actions_selectionnees]), actions_selectionnees
